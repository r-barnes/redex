"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[521],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return s},MDXProvider:function(){return u},mdx:function(){return h},useMDXComponents:function(){return m},withMDXComponents:function(){return p}});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},r.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=i.createContext({}),p=function(e){return function(n){var t=m(n.components);return i.createElement(e,r({},n,{components:t}))}},m=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=m(e.components);return i.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},x=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),p=m(t),u=a,x=p["".concat(o,".").concat(u)]||p[u]||c[u]||r;return t?i.createElement(x,l(l({ref:n},s),{},{components:t})):i.createElement(x,l({ref:n},s))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=x;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}x.displayName="MDXCreateElement"},60332:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return m}});var i=t(83117),a=t(80102),r=(t(67294),t(3905)),o=["components"],l={id:"installation",title:"Installation",sidebar_position:1},d=void 0,s={unversionedId:"getting_started/installation",id:"getting_started/installation",title:"Installation",description:"Dependencies",source:"@site/docs/getting_started/installation.md",sourceDirName:"getting_started",slug:"/getting_started/installation",permalink:"/docs/getting_started/installation",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"installation",title:"Installation",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Configuring ReDex",permalink:"/docs/getting_started/configuring"}},p={},m=[{value:"Dependencies",id:"dependencies",level:2},{value:"macOS",id:"macos",level:3},{value:"Ubuntu/Debian (64-bit)",id:"ubuntudebian-64-bit",level:3},{value:"Ubuntu 18.04+, Debian 10(Buster)+",id:"ubuntu-1804-debian-10buster",level:4},{value:"Experimental: Windows (64-bit) with MSYS2",id:"experimental-windows-64-bit-with-msys2",level:3},{value:"Experimental: Windows 10 (64-bit)",id:"experimental-windows-10-64-bit",level:3},{value:"Download, Build and Install",id:"download-build-and-install",level:2},{value:"Experimental: Windows (64-bit) with MSYS2",id:"experimental-windows-64-bit-with-msys2-1",level:3},{value:"Experimental: CMake for Mac, Linux, and Windows",id:"experimental-cmake-for-mac-linux-and-windows",level:3},{value:"Test",id:"test",level:2},{value:"Dependencies",id:"dependencies-1",level:3},{value:"Execute",id:"execute",level:3}],u={toc:m};function c(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.mdx)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h2",{id:"dependencies"},"Dependencies"),(0,r.mdx)("p",null,"We use package managers to resolve third-party library dependencies."),(0,r.mdx)("h3",{id:"macos"},"macOS"),(0,r.mdx)("p",null,"You will need Xcode with command line tools installed.  To get the command line tools, use:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"xcode-select --install\n")),(0,r.mdx)("p",null,"Install dependencies using homebrew:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"brew install autoconf automake libtool python3\nbrew install boost jsoncpp\n")),(0,r.mdx)("p",null,"For App Bundle support ",(0,r.mdx)("inlineCode",{parentName:"p"},"brew install protobuf")," is also required."),(0,r.mdx)("h3",{id:"ubuntudebian-64-bit"},"Ubuntu/Debian (64-bit)"),(0,r.mdx)("p",null,"Base requirements are automake & libtool, GCC >= 7, Python >= 3.6 and Boost >= 1.71.0, as well as\ndevelopment versions of ",(0,r.mdx)("inlineCode",{parentName:"p"},"iberty"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"jemalloc"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"jsoncpp"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"lz4"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"lzma"),", and ",(0,r.mdx)("inlineCode",{parentName:"p"},"zlib"),". ",(0,r.mdx)("inlineCode",{parentName:"p"},"Protobuf")," >= 3.0 is required if optimizing an App Bundle."),(0,r.mdx)("h4",{id:"ubuntu-1804-debian-10buster"},"Ubuntu 18.04+, Debian 10(Buster)+"),(0,r.mdx)("p",null,"The minimum supported Ubuntu version is 18.04. The minimum supported Debian version is 10."),(0,r.mdx)("p",null,"A ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/redex/blob/master/setup_oss_toolchain.sh"},"convenience script"),"\nwill set up the build environment. This may include downloading Python 3.6 and Boost 1.71.0\non older OS versions."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"sudo ./setup_oss_toolchain.sh\n")),(0,r.mdx)("p",null,"After the script, please run ",(0,r.mdx)("inlineCode",{parentName:"p"},"sudo ldconfig")," if it throws an error about loading shared libraries for running protoc."),(0,r.mdx)("h3",{id:"experimental-windows-64-bit-with-msys2"},"Experimental: Windows (64-bit) with MSYS2"),(0,r.mdx)("p",null,"You need ",(0,r.mdx)("a",{parentName:"p",href:"https://www.msys2.org/#installation"},"MSYS2")," to build ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex-all")," (only MingW-w64 is supported) and ",(0,r.mdx)("a",{parentName:"p",href:"https://www.python.org/downloads/windows/"},"Python 3.6+")," to run ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex.py"),"."),(0,r.mdx)("p",null,"Install the build requirements in an MSYS or MingW64 shell:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"pacman -Syuu && pacman -Sy make mingw-w64-x86_64-boost mingw-w64-x86_64-cmake mingw-w64-x86_64-gcc mingw-w64-x86_64-jsoncpp mingw-w64-x86_64-make\n")),(0,r.mdx)("p",null,"If you do not use Git on Windows directly, you may install and use it under MSY",(0,r.mdx)("a",{parentName:"p",href:"https://internalfb.com/S2"},"S2"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"pacman -S git\n")),(0,r.mdx)("h3",{id:"experimental-windows-10-64-bit"},"Experimental: Windows 10 (64-bit)"),(0,r.mdx)("p",null,"You need Visual Studio 2017. Visual Studio 2015 is also possible, but a couple of C++ compile errors need to be fixed. We use ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/Microsoft/vcpkg"},"vcpkg")," for dependencies. Install vcpkg from their ",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/Microsoft/vcpkg"},"document"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"cd c:\\tools\ngit clone https://github.com/Microsoft/vcpkg.git\ncd vcpkg\n.\\bootstrap-vcpkg.bat\n.\\vcpkg integrate install\n")),(0,r.mdx)("p",null,"Install necessary libraries with ",(0,r.mdx)("inlineCode",{parentName:"p"},"x64-windows-static"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},".\\vcpkg install boost --triplet x64-windows-static\n.\\vcpkg install zlib --triplet x64-windows-static\n.\\vcpkg install jsoncpp --triplet x64-windows-static\n.\\vcpkg install mman --triplet x64-windows-static\n")),(0,r.mdx)("h2",{id:"download-build-and-install"},"Download, Build and Install"),(0,r.mdx)("p",null,"Get ReDex from GitHub:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"git clone https://github.com/facebook/redex.git\ncd redex\n")),(0,r.mdx)("p",null,"Now, build ReDex using autoconf and make."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"autoreconf -ivf && ./configure && make\nsudo make install\n")),(0,r.mdx)("p",null,"Alternatively, to enable protobuf to support App Bundles, please use:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"autoreconf -ivf && ./configure --enable-protobuf\nmake\nsudo make install\n")),(0,r.mdx)("p",null,"For protobuf installed in the default system (Homebrew) search path (e.g /usr/local/bin), ",(0,r.mdx)("inlineCode",{parentName:"p"},"--enable-protobuf")," is sufficient to trigger the build. Otherwise, specify the protobuf installation path for the autoconf:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"autoreconf -ivf\n./configure --with-protoc=/path/to/protoc --with-protolib=/path/to/protobuf_libs --with-protoheader=/path/to/protobuf_headers --enable-protobuf\nmake\nsudo make install\n")),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"If your build machine has lots of RAM (on the order of 2-4GB per core), using\nMake parallelism can speed up the build (e.g., ",(0,r.mdx)("inlineCode",{parentName:"em"},"make -j4"),"). However, the C++\ncompilers are very memory hungry and this needs to be finely tuned on many\nsystems.")),(0,r.mdx)("h3",{id:"experimental-windows-64-bit-with-msys2-1"},"Experimental: Windows (64-bit) with MSYS2"),(0,r.mdx)("p",null,"The MSY",(0,r.mdx)("a",{parentName:"p",href:"https://internalfb.com/S2"},"S2")," build relies on CMake. In a MingW64 shell:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'# Assumes you want to use Git under MSYS. Else skip to below.\ngit clone https://github.com/facebook/redex.git\ncd redex\n# Assumes you are in the redex directory\nmkdir build-cmake\ncd build-cmake\ncmake -G "MSYS Makefiles" ..\nmake\n')),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"If your build machine has lots of RAM (on the order of 2-4GB per core), using\nMake parallelism can speed up the build (e.g., ",(0,r.mdx)("inlineCode",{parentName:"em"},"make -j4"),"). However, the C++\ncompilers are very memory hungry and this needs to be finely tuned on many\nsystems.")),(0,r.mdx)("p",null,"You may check whether the produced binary seems in a working condition:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"# In the MingW64 shell:\n./redex-all.exe --show-passes\n# Or in a standard Windows command prompt in the same directory\nredex-all.exe --show-passes\n")),(0,r.mdx)("p",null,"The output should show a large number of included passes, at the time of writing 81."),(0,r.mdx)("p",null,"Bundling the ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex-all")," binary with the python scripts is not supported on Windows. Manually copy the binary into the same directory as ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex.py")," and use ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex.py")," that way, or ensure that ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex.py")," is called with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--redex-binary")," parameter:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"python redex.py --redex-binary PATH_TO_BINARY [...]\n")),(0,r.mdx)("h3",{id:"experimental-cmake-for-mac-linux-and-windows"},"Experimental: CMake for Mac, Linux, and Windows"),(0,r.mdx)("p",null,"Alternatively, build using CMake. Note that the current ",(0,r.mdx)("inlineCode",{parentName:"p"},"CMakeLists.txt")," only implements a rule for ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex-all")," binary. We will support installation and testing soon."),(0,r.mdx)("p",null,"Generate build files. By default, it uses Makefile:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"# Assume you are in redex directory\nmkdir build-cmake\ncd build-cmake\n# .. is the root source directory of Redex\ncmake ..\n")),(0,r.mdx)("p",null,"If you prefer the ninja build system:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"cmake .. -G Ninja\n")),(0,r.mdx)("p",null,"On Windows, first, get ",(0,r.mdx)("inlineCode",{parentName:"p"},"CMAKE_TOOLCHAIN_FILE")," from the output of ",(0,r.mdx)("inlineCode",{parentName:"p"},'"vcpkg integrate install"'),", and then:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},'cmake .. -G "Visual Studio 15 2017 Win64"\n -DVCPKG_TARGET_TRIPLET=x64-windows-static\n -DCMAKE_TOOLCHAIN_FILE="C:/tools/vcpkg/scripts/buildsystems/vcpkg.cmake"\n')),(0,r.mdx)("p",null,"Build ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex-all"),":"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"cmake --build .\n")),(0,r.mdx)("p",null,"On Windows, you may build from Visual Studio. ",(0,r.mdx)("inlineCode",{parentName:"p"},"Redex.sln")," has been generated."),(0,r.mdx)("p",null,"You should see a ",(0,r.mdx)("inlineCode",{parentName:"p"},"redex-all")," executable, and the executable should show about 45 passes."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"./redex-all --show-passes\n")),(0,r.mdx)("h2",{id:"test"},"Test"),(0,r.mdx)("p",null,"Optionally, you can run our unit test suite.  We use gtest, which is automatically\ndownloaded when testing (or by invoking a setup script directly)."),(0,r.mdx)("p",null,"Note: Testing is currently not supported for CMake-based builds."),(0,r.mdx)("h3",{id:"dependencies-1"},"Dependencies"),(0,r.mdx)("p",null,"Some ReDex tests require a Java environment and Android compiler tooling. If a JDK and the\nAndroid SDK are available on the machine, ensure that ",(0,r.mdx)("inlineCode",{parentName:"p"},"javac")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"dx")," are available on\nthe ",(0,r.mdx)("inlineCode",{parentName:"p"},"PATH"),". Otherwise, install those dependencies."),(0,r.mdx)("p",null,"For Ubuntu/Debian, this may for example be done with"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"sudo apt-get install -y --no-install-recommends dalvik-exchange openjdk-8-jdk-headless\nsudo ln -s /usr/bin/dalvik-exchange /usr/local/bin/dx\n")),(0,r.mdx)("h3",{id:"execute"},"Execute"),(0,r.mdx)("p",null,"Run tests with"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"make -j check\n")),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"If your build machine has lots of RAM (on the order of 2-4GB per core), using\nMake parallelism can speed up the build and testing (e.g., ",(0,r.mdx)("inlineCode",{parentName:"em"},"make -j4"),"). However,\nthe C++ compilers are very memory hungry and this needs to be finely tuned on\nmany systems.")))}c.isMDXComponent=!0}}]);